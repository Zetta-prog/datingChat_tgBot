from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from random import choice

import components.keyboards.kb as kb
from database.crud import (
    check_user, add_user, add_gender, add_name, add_age, 
    commit_form, set_state_exit, get_companion_id, get_filters,
    add_filter_gender, reset_filter_gender, like_user,
    dislike_user, get_companion
)
from components.states.user_states import Form, Dialogue, EditForm
from components.search_companion import search, search_with_filters
from core.init_bot import bot, dp
from config import OPTIONS, DONATE_URL

user_router = Router()


@user_router.message(CommandStart())
async def start(message: Message):
    await add_user(user_id=message.chat.id)
    filter_gender = await get_filters(user_id=message.from_user.id)
    if filter_gender is None:
        filter_gender = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    else:
        filter_gender = '–º—É–∂—Å–∫–æ–π' if filter_gender.get('gender') == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    answer_text = f'<b>üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? –°–∫–æ—Ä–µ–µ –∏—â–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ /start - –ó–∞–ø—É—Å–∫\n‚Ä¢ /form - –ê–Ω–∫–µ—Ç–∞\n‚Ä¢ /search - –ü–æ–∏—Å–∫ \n‚Ä¢ /info - –ü—Ä–∞–≤–∏–ª–∞ \n‚Ä¢ /stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ \n‚Ä¢ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å\n\n–ù–µ –∑–Ω–∞–µ—à—å, –æ —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–º–æ–∂–µ—Ç!\n\n–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞: {filter_gender}</b>'
    await message.answer(answer_text,
                            reply_markup=kb.start_kb)
    await add_user(user_id=message.from_user.id)

@user_router.callback_query(F.data == 'start_dialogue')
async def start_dialogue(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    user = await check_user(user_id=callback.message.chat.id)
    if user and user.ready == True:
        await state.set_state(Dialogue.search)
        searching_message = await callback.message.answer('<b><i>–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üßç</i></b>',
                                        reply_markup=kb.finish_search)
        filters = await get_filters(user_id=callback.message.chat.id)
        if filters:
            companion = await search_with_filters(user_id=callback.message.chat.id)
            if companion:
                companion_id = await get_companion_id(user_id=callback.message.chat.id)
                companion = await get_companion(companion_id=companion_id)
                companion_gender = '–º—É–∂—Å–∫–æ–π' if companion.gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
                await callback.message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop\n\n–ü–æ–ª: {companion_gender}\n–í–æ–∑—Ä–∞—Å—Ç: {companion.age}\n–ò–º—è: {companion.name}</b>')
                await state.set_state(Dialogue.found)
                await searching_message.delete()
        else:
            companion = await search(user_id=callback.message.chat.id)
            if companion:
                companion_id = await get_companion_id(user_id=callback.message.chat.id)
                companion = await get_companion(companion_id=companion_id)
                companion_gender = '–º—É–∂—Å–∫–æ–π' if companion.gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
                await callback.message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop\n\n–ü–æ–ª: {companion_gender}\n–í–æ–∑—Ä–∞—Å—Ç: {companion.age}\n–ò–º—è: {companion.name}</b>')
                await state.set_state(Dialogue.found)
                await searching_message.delete()
    else:
        await callback.message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª</b>',
                                        reply_markup=kb.gender_kb)

@user_router.message(Command('search'))
async def search_func(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await message.answer('<b>–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    user = await check_user(user_id=message.from_user.id)
    if user and user.ready == True:
        await state.set_state(Dialogue.search)
        searching_message = await message.answer('<b><i>–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üßç</i></b>',
                                        reply_markup=kb.finish_search)
        filters = await get_filters(user_id=message.from_user.id)
        if filters:
            companion = await search_with_filters(user_id=message.from_user.id)
            if companion:
                companion_id = await get_companion_id(user_id=message.chat.id)
                companion = await get_companion(companion_id=companion_id)
                companion_gender = '–º—É–∂—Å–∫–æ–π' if companion.gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop\n\n–ü–æ–ª: {companion_gender}\n–í–æ–∑—Ä–∞—Å—Ç: {companion.age}\n–ò–º—è: {companion.name}</b>')
                await state.set_state(Dialogue.found)
                await searching_message.delete()
        else:
            companion = await search(user_id=message.from_user.id)
            if companion:
                companion_id = await get_companion_id(user_id=message.chat.id)
                companion = await get_companion(companion_id=companion_id)
                companion_gender = '–º—É–∂—Å–∫–æ–π' if companion.gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop\n\n–ü–æ–ª: {companion_gender}\n–í–æ–∑—Ä–∞—Å—Ç: {companion.age}\n–ò–º—è: {companion.name}</b>')
                await state.set_state(Dialogue.found)
                await searching_message.delete()
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª</b>',
                                        reply_markup=kb.gender_kb)

@user_router.callback_query(F.data == 'finish_search')
async def finish_search(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state != 'Dialogue:search':
        await callback.message.answer('<b>–ü–æ–∏—Å–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω</b>')
        return
    filter_gender = await get_filters(user_id=callback.message.chat.id)
    if filter_gender is None:
        filter_gender = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    else:
        filter_gender = '–º—É–∂—Å–∫–æ–π' if filter_gender.get('gender') == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    answer_text = f'<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ /start - –ó–∞–ø—É—Å–∫\n‚Ä¢ /form - –ê–Ω–∫–µ—Ç–∞\n‚Ä¢ /search - –ü–æ–∏—Å–∫ \n‚Ä¢ /info - –ü—Ä–∞–≤–∏–ª–∞ \n‚Ä¢ /stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ \n‚Ä¢ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å\n\n–ù–µ –∑–Ω–∞–µ—à—å, –æ —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–º–æ–∂–µ—Ç!\n\n–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞: {filter_gender}</b>'

    await callback.message.edit_text(f'<b>–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω\n\n{answer_text}</b>',
                                    reply_markup=kb.start_kb)
    await set_state_exit(user_id=callback.message.chat.id)
    await state.clear()

@user_router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state != 'Dialogue:search' and current_state != 'Dialogue:found':
        await state.clear()
    filter_gender = await get_filters(user_id=callback.message.chat.id)
    if filter_gender is None:
        filter_gender = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    else:
        filter_gender = '–º—É–∂—Å–∫–æ–π' if filter_gender.get('gender') == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    answer_text = f'<b>üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? –°–∫–æ—Ä–µ–µ –∏—â–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ /start - –ó–∞–ø—É—Å–∫\n‚Ä¢ /form - –ê–Ω–∫–µ—Ç–∞\n‚Ä¢ /search - –ü–æ–∏—Å–∫ \n‚Ä¢ /info - –ü—Ä–∞–≤–∏–ª–∞ \n‚Ä¢ /stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ \n‚Ä¢ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å\n\n–ù–µ –∑–Ω–∞–µ—à—å, –æ —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–º–æ–∂–µ—Ç!\n\n–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞: {filter_gender}</b>'

    await callback.message.edit_text(answer_text,
                                    reply_markup=kb.start_kb)

@user_router.callback_query(F.data == 'back_new_message')
async def back(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state != 'Dialogue:search' and current_state != 'Dialogue:found':
        await state.clear()
    filter_gender = await get_filters(user_id=callback.message.chat.id)
    if filter_gender is None:
        filter_gender = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    else:
        filter_gender = '–º—É–∂—Å–∫–æ–π' if filter_gender.get('gender') == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    answer_text = f'<b>üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? –°–∫–æ—Ä–µ–µ –∏—â–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n–î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ /start - –ó–∞–ø—É—Å–∫\n‚Ä¢ /form - –ê–Ω–∫–µ—Ç–∞\n‚Ä¢ /search - –ü–æ–∏—Å–∫ \n‚Ä¢ /info - –ü—Ä–∞–≤–∏–ª–∞ \n‚Ä¢ /stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ \n‚Ä¢ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å\n\n–ù–µ –∑–Ω–∞–µ—à—å, –æ —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–º–æ–∂–µ—Ç!\n\n–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞: {filter_gender}</b>'

    await callback.message.answer(answer_text,
                                    reply_markup=kb.start_kb)

'''
ADD FORM
'''
@user_router.callback_query(F.data == 'add_form')
async def add_form(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    data = await check_user(user_id=callback.message.chat.id)
    if not data.name or not data.age or not data.gender:
        await callback.message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª</b>',
                                        reply_markup=kb.gender_kb)
    else:
        await callback.message.answer('<b>–ê–Ω–∫–µ—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞</b>')

@user_router.callback_query(F.data.startswith('gender_'))
async def gender(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    gender = callback.data[7:]
    await add_gender(user_id=callback.message.chat.id, gender=gender)
    await callback.message.answer('<b>–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è</b>', 
                                    reply_markup=kb.back_kb)
    await state.set_state(Form.name)

@user_router.message(Form.name)
async def name(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>',
                                reply_markup=kb.back_kb)
        return
    if len(message.text) > 30 or '/' in message.text or ':' in message.text or '.' in message.text or '@' in message.text : 
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>',
                                reply_markup=kb.back_kb)
    else:
        await add_name(user_id=message.from_user.id, name=message.text)
        await message.answer('<b>–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç</b>',
                                reply_markup=kb.back_kb)
        await state.set_state(Form.age)

@user_router.message(Form.age)
async def age(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>',
                                reply_markup=kb.back_kb)
        return
    if not message.text.isdigit() or int(message.text) < 1 or int(message.text) > 150:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑</b>',
                                reply_markup=kb.back_kb)
    else:
        await add_age(user_id=message.from_user.id, age=int(message.text))
        await message.answer('<b>–û—Ç–ª–∏—á–Ω–æ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞</b>',
                            reply_markup=kb.start_kb)
        await commit_form(user_id=message.from_user.id)
        await state.clear()
'''
CHECK AND EDIT FORM
'''
@user_router.callback_query(F.data == 'my_form')
async def my_form(callback: CallbackQuery):
    await callback.answer()
    
    user = await check_user(user_id=callback.message.chat.id) 
    if user.name and user.age and user.gender:
        gender = '–º—É–∂—Å–∫–æ–π' if user.gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
        name = user.name.replace('<', '&lt;').replace('>', '&gt;')
        await callback.message.edit_text(f'<b><i>–í–ê–®–ê –ê–ù–ö–ï–¢–ê</i>\n\n–ü–æ–ª: {gender}\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ</b>',
                                        reply_markup=kb.edit_kb)
    else:
        await callback.message.edit_text('<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</b>', 
                                        reply_markup=kb.add_form)

@user_router.message(Command('form'))
async def form_func(message: Message):
    user = await check_user(user_id=message.from_user.id) 
    if user.name and user.age and user.gender:
        gender = '–º—É–∂—Å–∫–æ–π' if user.gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
        name = user.name.replace('<', '&lt;').replace('>', '&gt;')
        await message.answer(f'<b><i>–í–ê–®–ê –ê–ù–ö–ï–¢–ê</i>\n\n–ü–æ–ª: {gender}\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ</b>',
                                        reply_markup=kb.edit_kb)
    else:
        await message.answer('<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</b>', 
                                        reply_markup=kb.add_form)

@user_router.callback_query(F.data == 'edit_gender')
async def choose_gender(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    await callback.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª</b>',
                                    reply_markup=kb.edit_gender)

@user_router.callback_query(F.data.startswith('edit_gender_'))
async def edit_gender(callback: CallbackQuery,state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    gender = callback.data[12:]
    await add_gender(user_id=callback.message.chat.id, gender=gender)
    
    gender = '–º—É–∂—Å–∫–æ–π' if gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    await callback.message.answer(f'<b>–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {gender}</b>',
                                    reply_markup=kb.start_kb)

@user_router.callback_query(F.data == 'edit_name')
async def write_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    await callback.message.answer('<b>–Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è</b>',
                                    reply_markup=kb.back_kb)
    await state.set_state(EditForm.name)

@user_router.message(EditForm.name)
async def edit_name(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>',
                                reply_markup=kb.back_kb)
        return
    if len(message.text) > 30 or '/' in message.text or ':' in message.text or '.' in message.text or '@' in message.text : 
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑</b>',
                                reply_markup=kb.back_kb)
    else:
        await add_name(user_id=message.from_user.id, name=message.text)
        await message.answer(f'<b>–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}</b>',
                                reply_markup=kb.start_kb)
        await state.clear()

@user_router.callback_query(F.data == 'edit_age')
async def write_age(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç</b>',
                                    reply_markup=kb.back_kb)
    await state.set_state(EditForm.age)

@user_router.message(EditForm.age)
async def edit_age(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>',
                                reply_markup=kb.back_kb)
        return
    if not message.text.isdigit() or int(message.text) < 1 or int(message.text) > 150:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑</b>',
                                eply_markup=kb.back_kb)
    else:
        await add_age(user_id=message.from_user.id, age=int(message.text))
        await message.answer(f'<b>–í–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}</b>',
                            reply_markup=kb.start_kb)
        await commit_form(user_id=message.from_user.id)
        await state.clear()
'''
HELP
'''
@user_router.message(Command('help'))
async def help(message: Message):
    await message.answer(f'<b>–ü–æ–º–æ—â –æ—Ç –Ω–µ–π—Ä–æ–µ—Å—Ç–∏: </b><i>{choice(OPTIONS)}</i>\n\n–ï—Å–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–æ –∏—Å–ø–æ–ª—å–∑—É–π /help –µ—â–µ —Ä–∞–∑')

'''
CHATTING
'''
@user_router.message(Dialogue.found)
async def companion_found(message: Message, state: FSMContext):
    companion_id = await get_companion_id(user_id=message.from_user.id)
    filter_gender = await get_filters(user_id=message.from_user.id)
    if filter_gender is None:
        filter_gender = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    else:
        filter_gender = '–º—É–∂—Å–∫–æ–π' if filter_gender.get('gender') == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    answer_after_stop_text = f'<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ /start - –ó–∞–ø—É—Å–∫\n‚Ä¢ /form - –ê–Ω–∫–µ—Ç–∞\n‚Ä¢ /search - –ü–æ–∏—Å–∫ \n‚Ä¢ /info - –ü—Ä–∞–≤–∏–ª–∞ \n‚Ä¢ /stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ \n‚Ä¢ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å\n\n–ù–µ –∑–Ω–∞–µ—à—å, –æ —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–º–æ–∂–µ—Ç!\n\n–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞: {filter_gender}</b>'

    
    if message.text == '/stop':
        await message.answer('<b>–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞</b>',
                                reply_markup=kb.rating(to_user_id=companion_id))
        await message.answer(answer_after_stop_text,
                                reply_markup=kb.start_kb)
        try:
            await bot.send_message(chat_id=companion_id, text='<b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥, –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞</b>',
                                    reply_markup=kb.rating(to_user_id=message.from_user.id))
            await bot.send_message(chat_id=companion_id, text=answer_after_stop_text,
                                    reply_markup=kb.start_kb)
        except: pass
        await set_state_exit(user_id=message.from_user.id)
        await set_state_exit(user_id=companion_id)
        
        await state.clear()
        storage_key = StorageKey(bot_id=bot.id, user_id=companion_id, chat_id=companion_id)
        await dp.storage.set_state(key=storage_key, state=None)
        return
    
    try:
        if message.content_type == ContentType.TEXT:
            await bot.send_message(chat_id=companion_id, text=message.text, parse_mode=None)
        elif message.content_type == ContentType.PHOTO:
            await bot.send_photo(chat_id=companion_id, photo=message.photo[-1].file_id, caption=message.caption)
        elif message.content_type == ContentType.VIDEO:
            await bot.send_video(chat_id=companion_id, video=message.video.file_id, caption=message.caption)
        elif message.content_type == ContentType.AUDIO:
            await bot.send_audio(chat_id=companion_id, audio=message.audio.file_id, caption=message.caption)
        elif message.content_type == ContentType.VIDEO_NOTE:
            await bot.send_video_note(chat_id=companion_id, video_note=message.video_note.file_id)
        elif message.content_type == ContentType.STICKER:
            await bot.send_sticker(chat_id=companion_id, sticker=message.sticker.file_id)
        elif message.content_type == ContentType.ANIMATION:
            await bot.send_animation(chat_id=companion_id, animation=message.animation.file_id, caption=message.caption)
    except: pass
'''
RAITING
'''
@user_router.callback_query(F.data.startswith('like_user_'))
async def like_user_func(callback: CallbackQuery):
    companion_id = int(callback.data.split('_')[-1])
    is_liked = await like_user(from_user_id=callback.message.chat.id, to_user_id=companion_id)
    if is_liked:
        await callback.answer('–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!')
    else:
        await callback.answer('–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')

@user_router.callback_query(F.data.startswith('dislike_user_'))
async def dislike_user_func(callback: CallbackQuery):
    companion_id = int(callback.data.split('_')[-1])
    is_disliked = await dislike_user(from_user_id=callback.message.chat.id, to_user_id=companion_id)
    if is_disliked:
        await callback.answer('–î–∏–∑–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!')
    else:
        await callback.answer('–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
'''
FILTERS
'''
@user_router.callback_query(F.data == 'filters')
async def filters(callback: CallbackQuery):
    await callback.answer()
    data = await get_filters(user_id=callback.message.chat.id)
    if data:
        filter_gender = '–º—É–∂—Å–∫–æ–π' if data.get('gender') == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
        await callback.message.edit_text(f'<b>–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –º–æ–∂–µ—Ç–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n–§–∏–ª—å—Ç—Ä: {filter_gender}</b>',
                                        reply_markup=kb.filters_kb)
    else:
        await callback.message.edit_text('<b>–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –º–æ–∂–µ—Ç–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n–§–∏–ª—å—Ç—Ä: –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b>',
                                        reply_markup=kb.filters_kb)

@user_router.callback_query(F.data.startswith('filter_'))
async def filter_gender_func(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    current_state = await state.get_state()
    if current_state == 'Dialogue:search' or current_state == 'Dialogue:found':
        await callback.message.answer('<b>–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞</b>')
        return
    filter_gender = callback.data[7:]
    if filter_gender == 'reset':
        await reset_filter_gender(user_id=callback.message.chat.id)
        await callback.message.edit_text(f'<b>–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n–ü–æ–ª: –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b>',
                                        reply_markup=kb.start_kb)
        return
    await add_filter_gender(user_id=callback.message.chat.id, filter_gender=filter_gender)
    filter_gender = '–º—É–∂—Å–∫–æ–π' if filter_gender == 'man' else '–∂–µ–Ω—Å–∫–∏–π'
    await callback.message.edit_text(f'<b>–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n–ü–æ–ª: {filter_gender}</b>',
                                        reply_markup=kb.start_kb)
'''
INFO ABOUT BOT
'''
@user_router.message(Command('info'))
async def info(message: Message):
    await message.answer('<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ\n\n1) –†–∞—Å—Å—ã–ª–∞—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–∑—ã–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã\n2) –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞\n3) –û—Å–∫–æ—Ä–±–ª—è—Ç—å –∏ —É–Ω–∏–∂–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n4) –ü—ã—Ç–∞—Ç—å—Å—è –æ–±–º–∞–Ω—É—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n5) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ä—É—à–∏–≤—à–µ–≥–æ –∫–∞–∫–æ–µ –ª–∏–±–æ –∏–∑ –ø—Ä–∞–≤–∏–ª\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ</b>')
'''
OTHER
'''
@user_router.message(Command('stop'))
async def stop(message: Message):
    await message.answer('<b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞</b>')

@user_router.message(Command('donate'))
async def donate(message: Message):
    await message.answer_photo('https://ibb.co/Mxqy18Ds', caption=f'<b>–ü–æ–¥–¥–µ–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ CloudTips —Å–∫–∞–Ω–∏—Ä—É—è QR –∫–æ–¥ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–∞–≤ <a href="{DONATE_URL}">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å</a></b>',
                                reply_markup=kb.back_new_message_kb)
@user_router.message()
async def other(message: Message):
    await message.answer('<b>–£–ø—Å, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É</b>')